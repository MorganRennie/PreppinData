-- FUNCTIONS USED: 
-- CREATE TABLE, INSERT INTO, UPDATE, SET, RECURSIVE, CTE, UNION, LOCATE, REGEXP_REPLACE, TRIM, SUBSTRING_INDEX, CAST,CASE, IFNULL,CONCAT, LEFT, RIGHT, JOIN, ROUND, LENGTH

-- CREATE AND POPULATE TABLES
CREATE TABLE WEEK10_PRODUCT_TABLE 
(
    PRODUCT_TYPE	VARCHAR(512),
	PRODUCT_SCENT	VARCHAR(512),
    PACK_SIZE		VARCHAR(512),
    PRODUCT_SIZE	VARCHAR(512),
    UNIT_COST		DOUBLE,
    SELLING_PRICE 	DOUBLE
);
INSERT INTO WEEK10_PRODUCT_TABLE VALUES ();

CREATE TABLE WEEK10_TRANSACTION_DATA 
(
    TRANSACTION_DATE	VARCHAR(512),
    TRANSACTION_NUMBER	INT,
    PRODUCT_ID			VARCHAR(512),
    CASH_OR_CARD		VARCHAR(512),
    LOYALTY_NUMBER		VARCHAR(512),
    SALES_BEFORE_DISCOUNT	DOUBLE
);
INSERT INTO WEEK10_TRANSACTION_DATA VALUES ();

CREATE TABLE WEEK10_LOYALTY_TABLE 
(
    LOYALTY_NUMBER		INT,
    CUSTOMER_NAME		VARCHAR(512),
    LOYALTY_TIER		VARCHAR(512),
    LOYALTY_DISCOUNT	VARCHAR(512)
);
INSERT INTO WEEK10_LOYALTY_TABLE VALUES ();

############################################################################################
-- UPDATE STRING DATES TO BE RECOGNIZED BY SQL AS DATES.
UPDATE week10_transaction_data
SET TRANSACTION_DATE = STR_TO_DATE(TRANSACTION_DATE,'%W, %M %d, %Y');

############################################################################################
-- BEGINNING OF DATA CLEANING
-- FIRST CTE TO CREATE A DATE SCAFFOLD, FILLING IN ANY MISSING DATES FROM THE 1ST JAN 2023 TO THE LATEST DATE IN THE DATA SET.  
WITH recursive DATE_SCAFFOLD AS (
	SELECT
		'2023-01-01' AS SCA_DATE
	UNION ALL
	SELECT 
		SCA_DATE + INTERVAL 1 DAY 
	FROM DATE_SCAFFOLD
	WHERE SCA_DATE <'2024-03-06'),
-- SECOND CTE BEGINS DATA MANIPULATION, RESTRICTING DATES, SEPERATING PRODUCT ID, CONVERTING CASH/CARD NAMING
CTE AS (
	SELECT 
		SCA_DATE AS TRANSACTION_DATE,
		TRANSACTION_NUMBER,
		LEFT(PRODUCT_ID, LOCATE('-',PRODUCT_ID)-1) AS PRODUCT_TYPE,
		REGEXP_REPLACE(
			(TRIM(
				LEADING LEFT(PRODUCT_ID, LOCATE('-',PRODUCT_ID)) 
				FROM SUBSTRING_INDEX(PRODUCT_ID,'-',2)))
			,"_"," ") 
			AS PRODUCT_SCENT,
		CAST(SUBSTRING_INDEX(PRODUCT_ID,'-',-1) AS DOUBLE)
		    AS PRODUCT_SIZE,
        SUBSTRING_INDEX(PRODUCT_ID,'-',-1) AS PROD_SIZE,
		(CASE 
			WHEN CASH_OR_CARD=1 THEN "Card" 
			WHEN CASH_OR_CARD=2 THEN "Cash" 
			ELSE CASH_OR_CARD END)
			AS CASH_OR_CARD,
		LOYALTY_NUMBER,
		IFNULL(SALES_BEFORE_DISCOUNT,0) AS SALES_BEFORE_DISCOUNT
	FROM DATE_SCAFFOLD
	LEFT JOIN WEEK10_TRANSACTION_DATA
			ON TRANSACTION_DATE = SCA_DATE
	WHERE SCA_DATE >= '2023-01-01'),
-- THIRD CTE CLEANS THE LOYALTY TABLE IN PREPERATION FOR CLEANING, CONVERTING NAMES TO TITLE CASE, CLEANING DISCOUNT AND TIER INFO.
LOYALTY_TABLE AS (
	SELECT 
		LOYALTY_NUMBER,
		CONCAT(
			CONCAT(UPPER(
					LEFT(TRIM((SUBSTRING_INDEX(CUSTOMER_NAME,",",-1))
					),1)),
			RIGHT(
				SUBSTRING_INDEX(CUSTOMER_NAME,",",-1),
				LENGTH(SUBSTRING_INDEX(CUSTOMER_NAME,",",-1))-2))," ",
			CONCAT(UPPER(
					LEFT(TRIM((SUBSTRING_INDEX(CUSTOMER_NAME,",",1))
					),1)),
			RIGHT(
				(SUBSTRING_INDEX(CUSTOMER_NAME,",",1)),
				LENGTH(SUBSTRING_INDEX(CUSTOMER_NAME,",",1))-1)))
			AS FULL_NAME,
		(CASE 
			WHEN LEFT(LOYALTY_TIER,1)="B" OR LEFT(LOYALTY_TIER,1)="b" THEN "Bronze"
			WHEN LEFT(LOYALTY_TIER,1)="S" OR LEFT(LOYALTY_TIER,1)="s" THEN "Silver"
			WHEN LEFT(LOYALTY_TIER,1)="G" OR LEFT(LOYALTY_TIER,1)="g" THEN "Gold"
			ELSE ""
			END)
			AS LOYALTY_TIER,
		(CAST(LOYALTY_DISCOUNT AS DOUBLE))/100 AS LOYALTY_DISCOUNT
	FROM week10_loyalty_table),
-- FOURTH CTE EXISTS TO JOIN ALL OTHER CTES, AND COMPLETE FINANCE CALCULATIONS. 
MATHS_TABLE AS (
    SELECT 
        TRANSACTION_DATE,
        TRANSACTION_NUMBER,
        A.PRODUCT_TYPE,
        A.PRODUCT_SCENT,
        PROD_SIZE,
        CASH_OR_CARD,
        A.LOYALTY_NUMBER,
        LOYALTY_TIER,
        LOYALTY_DISCOUNT,
        SALES_BEFORE_DISCOUNT,
        FULL_NAME,
        UNIT_COST,
        SELLING_PRICE,
        ROUND(SALES_BEFORE_DISCOUNT/SELLING_PRICE) AS QUANTITY_SOLD,
        ROUND(SALES_BEFORE_DISCOUNT- SALES_BEFORE_DISCOUNT*LOYALTY_DISCOUNT,2) AS SALES_AFTER_DISCOUNT
    FROM CTE AS A 
    LEFT JOIN WEEK10_PRODUCT_TABLE AS B
        ON A.PRODUCT_TYPE=B.PRODUCT_TYPE
        AND A.PRODUCT_SCENT=B.PRODUCT_SCENT
        AND A.PRODUCT_SIZE= 
            (CAST((CASE WHEN PACK_SIZE="" THEN B.PRODUCT_SIZE ELSE PACK_SIZE END) AS DOUBLE))
    LEFT JOIN LOYALTY_TABLE AS C
        ON C.LOYALTY_NUMBER = A.LOYALTY_NUMBER)

-- FINAL CALL REFORMATS FOR CORRECT NAMING FUNCTIONS AND PROFIT CALCULATIONS.
SELECT 
    TRANSACTION_DATE AS 'Transaction Date',
    TRANSACTION_NUMBER AS 'Transaction Number',
    PRODUCT_TYPE AS 'Product Type',
    PRODUCT_SCENT AS 'Product Scent',
    PROD_SIZE AS 'Product Size',
    CASH_OR_CARD AS 'Cash or Card',
    LOYALTY_NUMBER AS 'Loyalty Number',
    FULL_NAME AS 'Customer Name',
    LOYALTY_TIER AS 'Loyalty Tier',
    LOYALTY_DISCOUNT AS 'Loyalty Discount',
    QUANTITY_SOLD AS 'Quantity',
    SALES_BEFORE_DISCOUNT AS 'Sales Before Discount',
    SALES_AFTER_DISCOUNT AS 'Sales After Discount',
    ROUND(SALES_AFTER_DISCOUNT - (UNIT_COST*QUANTITY_SOLD),2) AS 'Profit'
FROM MATHS_TABLE
